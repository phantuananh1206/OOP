/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplicationxephinh;

import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

/**
 *
 * @author Gemini
 */
public class JFrameGame extends javax.swing.JFrame {
   private Vector<String> vRandomNut = new Vector<>();
   private Random theRandom ;
   private JToggleButton[] ArrNut ;
   private ButtonGroup btngroup ;
   private String[][] Win = {{"1","2","3"}, 
                             {"4","5","6"},
                             {"7","8",""}};
   private String[][] Nut = new String[3][3];
   private Point pEmpty = new Point(0,0);
   private Point pClick = new Point();

    /**
     * Creates new form JFrameGame
     */
    public JFrameGame() {
        initComponents();
        myIntis();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelDisplay = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonlamMoi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 51)));
        jPanelDisplay.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText("Hãy sắp xếp đúng thứ tự tăng dần trong ô trống");

        jButtonlamMoi.setText("Làm mới");
        jButtonlamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonlamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonlamMoi)
                        .addGap(140, 140, 140))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanelDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonlamMoi)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonlamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonlamMoiActionPerformed
      setRandomNut();
    }//GEN-LAST:event_jButtonlamMoiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonlamMoi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelDisplay;
    // End of variables declaration//GEN-END:variables

    private void myIntis() {
        setTitle(" This is the game !");
        setLocationRelativeTo(null);
        
        ArrNut = new JToggleButton[9];
        btngroup = new ButtonGroup();
        jPanelDisplay.setLayout(new GridLayout(3,3));
        
        taoNut();
        setRandomNut();
        creatActionListenOfNut();
    }
    
    // Tự động tạo Nút
    private void taoNut(){
        for(int i=0;i<9;i++){
            ArrNut[i] = new JToggleButton("");
            jPanelDisplay.add(ArrNut[i]);
            btngroup.add(ArrNut[i]);
        }
      
    }
    // Tạo mới Random
    private void setRandomNut(){
           //Làm mới các số random có trước đó
           theRandom= new Random(); 
           vRandomNut.removeAllElements();
           vRandomNut.add("");
           //Lấy các số random
           int iNew; 
           for(int i=0;i<8;){
               iNew = theRandom.nextInt(9);
               if(iNew !=0 && !vRandomNut.contains(""+iNew)){
                   vRandomNut.add(""+iNew);
                   i++;
               }
           }
           //Đưa các số đã random vào Mảng
           int dem=0;
           for(int i=0;i<3;i++){
              for(int j=0;j<3;j++){
                  Nut[i][j] = vRandomNut.get(dem++);
              }
           }
           //Đưa các số từ mảng lên Nut
           updateNut();
           ArrNut[0].setSelected(true);
    }
    
    private void updateNut(){
       int dem=0;
           for(int i=0;i<3;i++){
               for(int j=0;j<3;j++){
                   ArrNut[dem++].setText(Nut[i][j]);
               }
           } 
    }
    
    private void creatActionListenOfNut(){
        for(int i=0;i<ArrNut.length;i++){
            ArrNut[i].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                   for(int x=0;x<3;x++){
                       for(int y=0;y<3;y++){
                       String text = ((JToggleButton)e.getSource()).getText();
                        if(text.equals(Nut[x][y])){
                            pClick.x=x;
                            pClick.y=y;
                            checkMove(pEmpty, pClick);
                        }
                       }
                   }
                }
            });
            }
        }
    
    
    
    
    
    
    // Kiểm tra sắp xếp đúng 
    private void checkWin(){
                  if(indexarray()){
                     thongBao("Chúc mừng bạn đã chiến thắng !!");
                     setRandomNut();
                     //Trả ô trống về với ban đầu
                     pEmpty.x=0;
                     pEmpty.y=0;
                  }
    }
    // So sánh 2 mảng có bằng nhau
    private boolean indexarray(){
        for(int i=1;i<3;i++){
            for(int j=1;j<3;j++){
                if(!Nut[i][j].equals(Win[i][j])){
                    return false;
                }
            }
        }
        return true;
    }
    
    //Kiểm tra di chuyển 
    private void checkMove(Point pEmpty,Point pClick){
        // Đánh dấu 
        int dau;
        //Kiểm tra dịch chuyển sang phải, không chéo
        if(pClick.getX()==pEmpty.getX() && pClick.getY()-1==pEmpty.getY()){
            dau=1;
            Swap(pEmpty,pClick,dau);
        }
        //Kiểm tra dịch chuyển sang trái, không chéo
        if(pClick.getX()==pEmpty.getX() && pClick.getY()+1==pEmpty.getY()){
            dau=2;
            Swap(pEmpty,pClick,dau);
        }
        //Kiểm tra dịch chuyên lên, không chéo
        if(pClick.getX()+1==pEmpty.getX() && pClick.getY()==pEmpty.getY()){
            dau=3;
            Swap(pEmpty,pClick,dau);
        }
        //Kiểm tra dich chuyển xuống, không chéo
        if(pClick.getX()-1==pEmpty.getX() && pClick.getY()==pClick.getY()){
            dau=4;
            Swap(pEmpty,pClick,dau); 
        }
    checkWin();
    }
    
    
    //Hiển thị thông báo
    private void thongBao(String str){
        JOptionPane.showMessageDialog(rootPane, str);
    }
    
    //Thực thi chuyển đổi các phần tử
    private void Swap(Point pEmpty,Point pClick,int dau) {
        if(dau==1){
           Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()];
           Nut[(int)pClick.getX()][(int)pClick.getY()] = "";
           pEmpty.y=pEmpty.y+1;
          updateNut();
        }
        if(dau==2){
           Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()];
           Nut[(int)pClick.getX()][(int)pClick.getY()] = "";
           pEmpty.y=pEmpty.y-1;
          updateNut();
        }
        if(dau==3){
           Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()];
           Nut[(int)pClick.getX()][(int)pClick.getY()] = "";
           pEmpty.x=pEmpty.x-1;
          updateNut();
        }
        if(dau==4){
           Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()];
           Nut[(int)pClick.getX()][(int)pClick.getY()] = "";
           pEmpty.x=pEmpty.x+1;
          updateNut();
        }
    }
    
    
    
}
