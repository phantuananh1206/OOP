/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplicationpuzzleimage;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

/**
 *
 * @author Gemini
 */
public class JFramePuzzle extends javax.swing.JFrame {
   private Point pEmpty = new Point(0,0);
   private Point pClick = new Point();
   private int point=0;
   
   private Vector<BufferedImage> vRandomNut = new Vector<>();
   private BufferedImage[][] Nut = new BufferedImage[3][3];
   private BufferedImage[][] Win;
   private BufferedImage[] imgs;
   private JToggleButton[][] ArrNut ;
   private ButtonGroup btngroup ;
    /**
     * Creates new form JFramePuzzle
     */
    public JFramePuzzle() {
        initComponents();
        myInits();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelDisplay = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelDisplay.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelDisplay.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanelDisplay.setLayout(new java.awt.GridLayout());

        jLabel1.setText("Hãy sắp xếp đúng thứ tự của hình ảnh");

        jLabel2.setText("Số lần của bạn đã đi :");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText(" ");

        jButton1.setText("Làm mới");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(190, 190, 190))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(39, 39, 39)
                .addComponent(jPanelDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabel3.setForeground(Color.BLACK);
        setRandomNut();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFramePuzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFramePuzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFramePuzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFramePuzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePuzzle().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanelDisplay;
    // End of variables declaration//GEN-END:variables

    private void myInits() {
        setTitle("Puzzle Image game");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        ArrNut = new JToggleButton[3][3];
        btngroup = new ButtonGroup();
        jPanelDisplay.setLayout(new GridLayout(3,3,5,5));
       try {
           creatImageChunks(3,3,"image.jpg");
       } catch (IOException ex) {
           Logger.getLogger(JFramePuzzle.class.getName()).log(Level.SEVERE, null, ex);
       }
        creatNut();
        CreatWin();
        setRandomNut();
        creatActionListenOfNut();
        
    }
    
    private void setRandomNut(){
           point=0;
           Random theRandom= new Random(); 
           vRandomNut.removeAllElements();
           vRandomNut.add(null);
           int iNew; 
           for(int i=0;i<8;){
           iNew = theRandom.nextInt(8);
           BufferedImage iImgbfNew = imgs[iNew];
               if( iImgbfNew != null && !vRandomNut.contains(iImgbfNew)){
                   vRandomNut.add(iImgbfNew);
                  i++;
               }
           }
           int dem=0;
           for(int i=0;i<3;i++){
              for(int j=0;j<3;j++){
                  Nut[i][j] = vRandomNut.get(dem++);
              }
           }
           updateNut();
           jLabel3.setText(String.valueOf(point));
           pEmpty.x=0;
           pEmpty.y=0;
           ArrNut[0][0].setSelected(true);
    }   
    
    private void creatNut() {
           for(int i=0;i<3;i++){
               for(int j=0;j<3;j++){
            ArrNut[i][j] = new JToggleButton("");
            ArrNut[i][j].setSize(new Dimension(90,90));
            jPanelDisplay.add(ArrNut[i][j]);
            btngroup.add(ArrNut[i][j]);  
               }
        }
    }
    
 
    private void creatImageChunks(int rows,int cols,String url) throws IOException{
        BufferedImage img = ImageIO.read(new File(url));
        int chunks = rows*cols;
        int chunksWidth = img.getWidth()/cols;
        int chunksHeight = img.getHeight()/rows;
        imgs = new BufferedImage[chunks];
        int Count =0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                imgs[Count] = new BufferedImage(chunksWidth,chunksHeight,img.getType());
                Graphics2D gr = imgs[Count++].createGraphics();
                gr.drawImage(img,0,0,chunksWidth,chunksHeight,chunksWidth*j,chunksHeight*i,chunksWidth*j+chunksWidth,chunksHeight*i+chunksHeight,null);
                gr.dispose();
            } 
        }
      
    }
     
    private void updateNut(){
           for(int i=0;i<3;i++){
               for(int j=0;j<3;j++){
                   ArrNut[i][j].setIcon(creatIcon(resizeToJlabel(Nut[i][j],ArrNut[i][j])));
                 pack();
               }
           } 
    }
    
    private void CreatWin(){
        Win= new BufferedImage[3][3];
        int dem=0;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
            if(dem<9){
            Win[i][j]=imgs[dem++];
            }
        }
        }
        
    } 
    
    
    private void creatActionListenOfNut(){
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
            ArrNut[i][j].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                   for(int x=0;x<3;x++){
                       for(int y=0;y<3;y++){
                        if(ArrNut[x][y].isSelected()){
                            pClick.x=x;
                            pClick.y=y;
                            checkMove(pEmpty, pClick);
                        }
                       }
                   }
                }
            });
            }
        }
        }
    
    
         private void checkWin(){
                  if(indexarray()){
                     thongBao("Chúc mừng bạn đã chiến thắng !! Số lần đã đi là "+ point);
                     setRandomNut();
                     pEmpty.x=0;
                     pEmpty.y=0;
                  }
    }
  
    private boolean indexarray(){
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                try{
                if(Win[i][j].getRGB(25,80) != Nut[i][j].getRGB(25,80))
                    return false;
                }catch(NullPointerException e){
                   if(Win[i][j] == null && Nut[i][j] == null){
                       return true;
                   }
               }
            }
          
        }
        return true;
    }
    
     private void checkMove(Point pEmpty,Point pClick){
        int dau;
        //Kiểm tra dịch chuyển sang phải, không chéo
        if(pClick.getX()==pEmpty.getX() && pClick.getY()-1==pEmpty.getY()){
            dau=1;
            Swap(pEmpty,pClick,dau);
        }
        //Kiểm tra dịch chuyển sang trái, không chéo
        if(pClick.getX()==pEmpty.getX() && pClick.getY()+1==pEmpty.getY()){
            dau=2;
            Swap(pEmpty,pClick,dau);
        }
        //Kiểm tra dịch chuyên lên, không chéo
        if(pClick.getX()+1==pEmpty.getX() && pClick.getY()==pEmpty.getY()){
            dau=3;
            Swap(pEmpty,pClick,dau);
        }
        //Kiểm tra dich chuyển xuống, không chéo
        if(pClick.getX()-1==pEmpty.getX() && pClick.getY()==pEmpty.getY()){
            dau=4;
            Swap(pEmpty,pClick,dau); 
        }
        NutEmptySelected();
      checkWin();
    }
        
      private void thongBao(String str){
        JOptionPane.showMessageDialog(rootPane, str);
    }
    
    private void Swap(Point pEmpty,Point pClick,int dau) {
        if(dau==1){
           Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()]; 
           Nut[(int)pClick.getX()][(int)pClick.getY()] = null;
           pEmpty.y=pEmpty.y+1; 
          updateNut();
        }
        if(dau==2){
           Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()];
           Nut[(int)pClick.getX()][(int)pClick.getY()] = null;
           pEmpty.y=pEmpty.y-1;
          updateNut();
        }
        if(dau==3){
           Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()];
           Nut[(int)pClick.getX()][(int)pClick.getY()] = null;
           pEmpty.x=pEmpty.x-1;
          updateNut();
        }
        if(dau==4){
          Nut[(int)pEmpty.getX()][(int)pEmpty.getY()] = Nut[(int)pClick.getX()][(int)pClick.getY()];
          Nut[(int)pClick.getX()][(int)pClick.getY()] = null;
           pEmpty.x=pEmpty.x+1;
          updateNut();
        }
         jLabel3.setText(String.valueOf(++point));
        if(Integer.parseInt(jLabel3.getText())>300){
            jLabel3.setForeground(Color.red);
        }
    }
    
    private void NutEmptySelected(){
        ArrNut[pEmpty.x][pEmpty.y].setSelected(true);
    }
    
    private Image resizeToJlabel(BufferedImage img,JToggleButton jlb){
        try {
             return img.getScaledInstance(jlb.getHeight(),jlb.getHeight(),Image.SCALE_SMOOTH);
        } catch (NullPointerException e) {
            return null;
        }
    }
    
      private ImageIcon creatIcon(Image dimg){
        try{
        return new ImageIcon(dimg);
        }catch(NullPointerException e){
            return null;
        }
    }
    
     
    
}
